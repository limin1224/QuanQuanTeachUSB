C51 COMPILER V7.06   MAIN                                                                  02/25/2012 23:05:51 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN Main.OBJ
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE Main.c BROWSE DEBUG OBJECTEXTEND TABS(1)

stmt level    source

   1          /******************************************************************
   2             本程序只供学习使用，未经作者许可，不得用于其它任何用途
   3             
   4                  欢迎访问我的USB专区：http://group.ednchina.com/93/
   5                  欢迎访问我的blog：   http://www.ednchina.com/blog/computer00
   6                                       http://computer00.21ic.org
   7          
   8                  感谢PCB赞助商――电子园： http://bbs.cepark.com/
   9          
  10          main.c file
  11          
  12          作者：电脑圈圈
  13          建立日期: 2008.06.27
  14          修改日期: 2012.01.26
  15          版本：V1.1
  16          版权所有，盗版必究。
  17          Copyright(C) 电脑圈圈 2008-2018
  18          All rights reserved            
  19          *******************************************************************/
  20          
  21          #include <AT89X52.H>  //头文件
  22          #include "Key.h"
  23          #include "Led.h"
  24          #include "UART.h"
  25          #include "pdiusbd12.h"
  26          #include "UsbCore.h"
  27          #include "config.h"
  28          #include <math.h>
  29          
  30          #define PI 3.1415926
  31          
  32          #undef SHOW_MORE_MSG
  33          
  34          #ifdef SHOW_MORE_MSG //节省ROM空间
              code uint8 HeadTable[][74]={
              "********************************************************************\r\n",
              "******             《圈圈教你玩USB》之 USB触摸屏              ******\r\n",
              "******                      AT89S52 CPU                       ******\r\n",
              "******                  建立日期：",__DATE__,"                 ******\r\n",
              "******                   建立时间：",__TIME__,"                   ******\r\n",
              "******                    作者：电脑圈圈                      ******\r\n",
              "******                    欢迎访问作者的                      ******\r\n",
              "******           USB专区：http://group.ednchina.com/93/       ******\r\n",
              "******      BLOG1：http://www.ednchina.com/blog/computer00    ******\r\n",
              "******                BLOG2：http://computer00.21ic.org       ******\r\n",
              "******                  请按K1-K8分别进行测试                 ******\r\n",
              "******    K1:回到中心  K2:画直线   K3:画三角形  K4:画正方形   ******\r\n",
              "******    K5:画圆      K6:正弦曲线 K7:无        K8:无         ******\r\n",
              "********************************************************************\r\n",
              };
              #endif
  52          
  53          /********************************************************************
  54          函数功能：中断处理函数。
  55          入口参数：无。
C51 COMPILER V7.06   MAIN                                                                  02/25/2012 23:05:51 PAGE 2   

  56          返    回：无。
  57          备    注：无。
  58          ********************************************************************/
  59          void ProcessInterrupt(void)
  60          {
  61   1       int8 InterruptSource;
  62   1       if(D12GetIntPin() == 0) //如果有中断发生
  63   1       {
  64   2        //有中断发生，处理之
  65   2        D12WriteCommand(READ_INTERRUPT_REGISTER);  //写读中断寄存器的命令
  66   2        InterruptSource=D12ReadByte(); //读回第一字节的中断寄存器
  67   2        if(InterruptSource&0x80)UsbBusSuspend(); //总线挂起中断处理
  68   2        if(InterruptSource&0x40)UsbBusReset();   //总线复位中断处理
  69   2        if(InterruptSource&0x01)UsbEp0Out();     //端点0输出中断处理
  70   2        if(InterruptSource&0x02)UsbEp0In();      //端点0输入中断处理
  71   2        if(InterruptSource&0x04)UsbEp1Out();     //端点1输出中断处理
  72   2        if(InterruptSource&0x08)UsbEp1In();      //端点1输入中断处理
  73   2        if(InterruptSource&0x10)UsbEp2Out();     //端点2输出中断处理
  74   2        if(InterruptSource&0x20)UsbEp2In();      //端点2输入中断处理
  75   2       }
  76   1      }
  77          ////////////////////////End of function//////////////////////////////
  78          
  79          /********************************************************************
  80          函数功能：产生单点触摸事件。
  81          入口参数：x：x轴坐标；y：y轴坐标；touch：是否触摸。
  82          返    回：无。
  83          备    注：无。
  84          ********************************************************************/
  85          void SinglePointReport(uint16 x, uint16 y, uint8 touch)
  86          {
  87   1       //需要返回的6字节报告的缓冲
  88   1       //Buf[0]为报告ID，值为REPORTID_STOUCH。
  89   1       //Buf[1]的D0就是左键，D1就是右键，D2就是中键
  90   1       //Buf[2]为X轴低字节，Buf[3]为X轴高字节，
  91   1       //Buf[4]为Y轴低字节，Buf[5]为Y轴高字节。
  92   1       uint8 Buf[6]={0,0,0,0,0,0};
  93   1       Buf[0] = REPORTID_STOUCH;
  94   1       Buf[1] = touch;
  95   1       Buf[2] = x & 0xFF;
  96   1       Buf[3] = (x >> 8) & 0xFF;
  97   1       Buf[4] = y & 0xFF;
  98   1       Buf[5] = (y >> 8) & 0xFF;
  99   1       while(Ep1InIsBusy) //等待之前的数据发送完毕
 100   1       {
 101   2        ProcessInterrupt();  //处理中断
 102   2       }
 103   1       if(ConfigValue == 0) return;
 104   1       //报告准备好了，通过端点1返回，长度为6字节。
 105   1       D12WriteEndpointBuffer(3, 6, Buf);
 106   1       Ep1InIsBusy=1;  //设置端点忙标志。
 107   1      }
 108          ////////////////////////End of function//////////////////////////////
 109          
 110          #define MoveTo(x,y) SinglePointReport(x, y, 0)
 111          #define LineTo(x,y) SinglePointReport(x, y, 1)
 112          
 113          /********************************************************************
 114          函数功能：画圆的函数。
 115          入口参数：x：x轴坐标；y：y轴坐标；r：半径
 116          返    回：无。
 117          备    注：无。
C51 COMPILER V7.06   MAIN                                                                  02/25/2012 23:05:51 PAGE 3   

 118          ********************************************************************/
 119          void DrawCirle(uint16 x, uint16 y, uint16 r)
 120          {
 121   1       uint16 i, px, py;
 122   1       MoveTo(x + r, y);
 123   1       LineTo(x + r, y);
 124   1       for(i = 0; i < 360; i ++)
 125   1       {
 126   2        px = x + r * cos((i * 1.0) / 180 * PI);
 127   2        py = y + r * sin((i * 1.0) / 180 * PI);
 128   2        LineTo(px, py);
 129   2       }
 130   1       MoveTo(x + r, y);
 131   1      }
 132          ////////////////////////End of function//////////////////////////////
 133          
 134          /********************************************************************
 135          函数功能：画正弦曲线的函数。
 136          入口参数：无。
 137          返    回：无。
 138          备    注：无。
 139          ********************************************************************/
 140          void DrawSinCurve(void)
 141          {
 142   1       uint16 px, py;
 143   1       MoveTo(4000, 2000);
 144   1       LineTo(4000, 2000);
 145   1       LineTo(400, 2000);
 146   1       for(px = 400; px <= 4000; px += 10)
 147   1       {
 148   2        py = 2000 - 1000 * sin(((px - 400) / 2.5) / 180 * PI);
 149   2        LineTo(px, py);
 150   2       }
 151   1       MoveTo(px, py);
 152   1      }
 153          ////////////////////////End of function//////////////////////////////
 154          
 155          /********************************************************************
 156          函数功能：根据按键情况返回报告的函数。
 157          入口参数：无。
 158          返    回：无。
 159          备    注：无。
 160          ********************************************************************/
 161          void SendReport(void)
 162          {
 163   1       if(KeyDown & (KEY1))
 164   1       {
 165   2        MoveTo(4096 / 2, 4096 /2); //移动到屏幕中心
 166   2       }
 167   1       if(KeyDown & (KEY2)) //画直线
 168   1       {
 169   2        MoveTo(1000, 1000); //移动到（1000，1000）
 170   2        LineTo(1000, 1000); //开始画线
 171   2        LineTo(3000, 3000); //画线到（3000，3000）
 172   2        MoveTo(3000, 3000); //松开鼠标左键
 173   2       }
 174   1       if(KeyDown & (KEY3)) //画三角形
 175   1       {
 176   2        MoveTo(2000, 1000); //移动到（2000，1000）
 177   2        LineTo(2000, 1000); //开始画线
 178   2        LineTo(1000, 3000); //画线到（1000，3000）
 179   2        LineTo(3000, 3000); //画线到（3000，3000）
C51 COMPILER V7.06   MAIN                                                                  02/25/2012 23:05:51 PAGE 4   

 180   2        LineTo(2000, 1000); //画线到（2000，1000）
 181   2        MoveTo(2000, 1000); //松开鼠标左键
 182   2       }
 183   1       if(KeyDown & (KEY4)) //画正方形
 184   1       {
 185   2        MoveTo(1000, 1000); //移动到（1000，1000）
 186   2        LineTo(1000, 1000); //开始画线
 187   2        LineTo(1000, 3000); //画线到（1000，3000）
 188   2        LineTo(3000, 3000); //画线到（3000，3000）
 189   2        LineTo(3000, 1000); //画线到（3000，1000）
 190   2        LineTo(1000, 1000); //画线到（1000，1000）
 191   2        MoveTo(1000, 1000); //松开鼠标左键
 192   2       }
 193   1       if(KeyDown & (KEY5))
 194   1       {
 195   2        DrawCirle(2000, 2000, 1000); //画一个圆心在（2000，2000），半径为1000的圆
 196   2       }
 197   1       if(KeyDown & (KEY6))
 198   1       {
 199   2        DrawSinCurve(); //画正弦曲线
 200   2       }
 201   1       //记得清除KeyUp和KeyDown
 202   1       KeyUp=0;
 203   1       KeyDown=0;
 204   1      }
 205          ////////////////////////End of function//////////////////////////////
 206          
 207          /********************************************************************
 208          函数功能：产生多点触摸事件。
 209          入口参数：x：x轴坐标数组；y：y轴坐标数组；
 210                    s：状态数组，例如是否触摸，是否有效；n：触摸的点数。
 211          返    回：无。
 212          备    注：无。
 213          ********************************************************************/
 214          void MultiPointReport(uint16 *x, uint16 *y, uint8 *s, uint8 n)
 215          {
 216   1       uint8 i;
 217   1       uint8 ReportBuf[14]; //总共为14字节，第1字节为报告ID。
 218   1       //第2字节为第一点状态，第3字节为第一点的触摸ID号；
 219   1       //第4、5字节为第一点x轴，第6、7字节为第一点y轴；
 220   1       //第8字节为第二点状态，第9字节为第二点的触摸ID号；
 221   1       //第10、11字节为第二点x轴，第12、13字节为第二点y轴；
 222   1       //第14字节为当前触摸的点数。我们定义的报告中，每次只能
 223   1       //发送2个点，如果超过两个点，则另外再增加额外的报告，
 224   1       //这时额外的报告的触摸点数都要设置为0。
 225   1       if(n == 0) return;
 226   1       if(n > MAX_TOUCH_POINT) //如果超过最大支持的点数，则只发送最多点数
 227   1       {
 228   2        n = MAX_TOUCH_POINT;
 229   2       }
 230   1       ReportBuf[0] = REPORTID_MTOUCH; //多点报告的报告ID为REPORTID_MTOUCH
 231   1       for(i = 0; i < n;) //分别发送各个点
 232   1       {
 233   2        ReportBuf[1] = s[i]; //状态
 234   2        ReportBuf[2] = i + 1; //ID号
 235   2        ReportBuf[3] = x[i] & 0xFF; //X轴低8位
 236   2        ReportBuf[4] = (x[i] >> 8) & 0xFF; //X轴高8位
 237   2        ReportBuf[5] = y[i] & 0xFF; //Y轴低8位
 238   2        ReportBuf[6] = (y[i] >> 8) & 0xFF; //Y轴高8位
 239   2        if(i == 0) //第一个包
 240   2        {
 241   3         ReportBuf[13] = n; //触摸的点数
C51 COMPILER V7.06   MAIN                                                                  02/25/2012 23:05:51 PAGE 5   

 242   3        }
 243   2        else //其它包，设置为0
 244   2        {
 245   3         ReportBuf[13] = 0;
 246   3        }
 247   2        i ++;
 248   2        if(i < n) //还有数据需要发送
 249   2        {
 250   3         ReportBuf[7] = s[i]; //状态
 251   3         ReportBuf[8] = i + 1; //ID号
 252   3         ReportBuf[9] = x[i] & 0xFF; //X轴低8位
 253   3         ReportBuf[10] = (x[i] >> 8) & 0xFF; //X轴高8位
 254   3         ReportBuf[11] = y[i] & 0xFF; //Y轴低8位
 255   3         ReportBuf[12] = (y[i] >> 8) & 0xFF; //Y轴高8位
 256   3         i ++;
 257   3        }
 258   2        else //没有更多的数据需要发送，后面的清0
 259   2        {
 260   3         uint8 j;
 261   3         for(j = 7; j < 13; j++)
 262   3         {
 263   4          ReportBuf[j] = 0;
 264   4         }
 265   3        }
 266   2        while(Ep1InIsBusy) //等待之前的数据发送完毕
 267   2        {
 268   3         ProcessInterrupt();  //处理中断
 269   3        }
 270   2        if(ConfigValue == 0) return;
 271   2        //报告准备好了，通过端点1返回，长度为14字节。
 272   2        D12WriteEndpointBuffer(3, 14, ReportBuf);
 273   2        Ep1InIsBusy=1;  //设置端点忙标志。
 274   2       }
 275   1      }
 276          ////////////////////////End of function//////////////////////////////
 277          
 278          /********************************************************************
 279          函数功能：多点模式点击屏幕中央。
 280          入口参数：touch: 0表示松开，1表示触摸。
 281          返    回：无。
 282          备    注：无。
 283          ********************************************************************/
 284          void MultiPointGoToCenter(uint8 touch)
 285          {
 286   1       uint16 x, y;
 287   1       uint8 s;
 288   1       x = 4096 / 2;
 289   1       y = 4096 / 2;
 290   1       if(touch)
 291   1       {
 292   2        s = 0x07; //点击
 293   2       }
 294   1       else
 295   1       {
 296   2        s = 0x00; //松开
 297   2       }
 298   1       MultiPointReport(&x, &y, &s, 1);
 299   1      }
 300          ////////////////////////End of function//////////////////////////////
 301          
 302          /********************************************************************
 303          函数功能：多点模式画一条线段。
C51 COMPILER V7.06   MAIN                                                                  02/25/2012 23:05:51 PAGE 6   

 304          入口参数：无。
 305          返    回：无。
 306          备    注：无。
 307          ********************************************************************/
 308          void MultiPointDrawLine()
 309          {
 310   1       uint16 x, y;
 311   1       uint8 s;
 312   1       x = 1000;
 313   1       y = 1000;
 314   1       s = 0x06; //数据有效，但是无点击
 315   1       MultiPointReport(&x, &y, &s, 1); //移动到(1000, 1000)
 316   1       s = 0x07; //数据有效，且有点击
 317   1       MultiPointReport(&x, &y, &s, 1); //开始画线
 318   1       x = 3000;
 319   1       y = 3000;
 320   1       MultiPointReport(&x, &y, &s, 1); //画到(3000, 3000)
 321   1       s = 0x00; //停止触摸
 322   1       MultiPointReport(&x, &y, &s, 1);
 323   1      }
 324          ////////////////////////End of function//////////////////////////////
 325          
 326          /********************************************************************
 327          函数功能：同时画二个三角形。
 328          入口参数：无。
 329          返    回：无。
 330          备    注：无。
 331          ********************************************************************/
 332          void MultiPointDrawTriangle()
 333          {
 334   1       uint16 x[2], y[2];
 335   1       uint8 s[2];
 336   1       x[0] = 2000;
 337   1       y[0] = 1000;
 338   1       s[0] = 0x06;
 339   1       x[1] = x[0];
 340   1       y[1] = y[0] + 500;
 341   1       s[1] = 0x06;
 342   1       MultiPointReport(x, y, s, 2); //移动到起点
 343   1       s[0] = 0x07;
 344   1       s[1] = 0x07;
 345   1       MultiPointReport(x, y, s, 2); //开始画线
 346   1       x[0] = 1000;
 347   1       y[0] = 3000;
 348   1       x[1] = x[0] + 500 * cos(30 * PI / 180);
 349   1       y[1] = y[0] - 500 * sin(30 * PI / 180);
 350   1       MultiPointReport(x, y, s, 2); //画左边两条线
 351   1       x[0] = 3000;
 352   1       y[0] = 3000;
 353   1       x[1] = x[0] - 500 * cos(30 * PI / 180);
 354   1       y[1] = y[0] - 500 * sin(30 * PI / 180);
 355   1       MultiPointReport(x, y, s, 2); //画底边两条线
 356   1       x[0] = 2000;
 357   1       y[0] = 1000;
 358   1       x[1] = x[0];
 359   1       y[1] = y[0] + 500;
 360   1       MultiPointReport(x, y, s, 2); //画右边两条线
 361   1       s[0] = 0;
 362   1       s[1] = 0;
 363   1       MultiPointReport(x, y, s, 2); //停止触摸
 364   1      }
 365          ////////////////////////End of function//////////////////////////////
C51 COMPILER V7.06   MAIN                                                                  02/25/2012 23:05:51 PAGE 7   

 366          
 367          /********************************************************************
 368          函数功能：同时画四个正方形。
 369          入口参数：无。
 370          返    回：无。
 371          备    注：无。
 372          ********************************************************************/
 373          void MultiPointDrawSquare()
 374          {
 375   1       uint16 x[4], y[4];
 376   1       uint8 s[4];
 377   1       uint8 i;
 378   1       x[0] = 1000;
 379   1       y[0] = 1000;
 380   1       s[0] = 0x06;
 381   1       for(i = 1; i < 4; i ++)
 382   1       {
 383   2        x[i] = x[i - 1] + 100;
 384   2        y[i] = y[i - 1] + 100;
 385   2        s[i] = s[0];
 386   2       }
 387   1       MultiPointReport(x, y, s, 4); //移动到起点
 388   1       for(i = 0; i < 4; i ++)
 389   1       {
 390   2        s[i] = 0x07;
 391   2       }
 392   1       MultiPointReport(x, y, s, 4); //开始画线
 393   1       y[0] = 3000;
 394   1       y[1] = 3000 - 100;
 395   1       y[2] = 3000 - 200;
 396   1       y[3] = 3000 - 300;
 397   1       MultiPointReport(x, y, s, 4); //画左边4条线
 398   1       x[0] = 3000;
 399   1       x[1] = 3000 - 100;
 400   1       x[2] = 3000 - 200;
 401   1       x[3] = 3000 - 300;
 402   1       MultiPointReport(x, y, s, 4); //画左边4条线
 403   1       y[0] = 1000;
 404   1       y[1] = 1000 + 100;
 405   1       y[2] = 1000 + 200;
 406   1       y[3] = 1000 + 300;
 407   1       MultiPointReport(x, y, s, 4); //画右边4条线
 408   1       x[0] = 1000;
 409   1       x[1] = 1000 + 100;
 410   1       x[2] = 1000 + 200;
 411   1       x[3] = 1000 + 300;
 412   1       MultiPointReport(x, y, s, 4); //画上边4条线
 413   1       for(i = 0; i < 4; i ++)
 414   1       {
 415   2        s[i] = 0;
 416   2       }
 417   1       MultiPointReport(x, y, s, 4); //停止触摸
 418   1      }
 419          ////////////////////////End of function//////////////////////////////
 420          
 421          /********************************************************************
 422          函数功能：同时画三个圆。
 423          入口参数：无。
 424          返    回：无。
 425          备    注：无。
 426          ********************************************************************/
 427          void MultiPointDrawCircle(void)
C51 COMPILER V7.06   MAIN                                                                  02/25/2012 23:05:51 PAGE 8   

 428          {
 429   1       #define CENTER_X 2000
 430   1       #define CENTER_Y 2000
 431   1       #define R0       1000
 432   1       #define R1       800
 433   1       #define R2       600
 434   1       
 435   1       uint16 x[3], y[3];
 436   1       uint8 s[3];
 437   1       uint16 i;
 438   1       float vsin, vcos;
 439   1       
 440   1       x[0] = CENTER_X + R0;
 441   1       x[1] = CENTER_X + R1;
 442   1       x[2] = CENTER_X + R2;
 443   1       for(i = 0; i < 3; i ++)
 444   1       {
 445   2        y[i] = CENTER_Y;
 446   2        s[i] = 0x06;
 447   2       }
 448   1       MultiPointReport(x, y, s, 3); //移动到起点
 449   1       for(i = 0; i < 3; i ++)
 450   1       {
 451   2        s[i] = 0x07;
 452   2       }
 453   1       MultiPointReport(x, y, s, 3); //开始画线
 454   1       for(i = 0; i < 360; i ++)
 455   1       {
 456   2        vsin = sin((i * 1.0) / 180 * PI);
 457   2        vcos = cos((i * 1.0) / 180 * PI);
 458   2        x[0] = CENTER_X + R0 * vcos;
 459   2        y[0] = CENTER_Y + R0 * vsin;
 460   2        x[1] = CENTER_X + R1 * vcos;
 461   2        y[1] = CENTER_Y + R1 * vsin;
 462   2        x[2] = CENTER_X + R2 * vcos;
 463   2        y[2] = CENTER_Y + R2 * vsin;
 464   2        MultiPointReport(x, y, s, 3); //画线
 465   2       }
 466   1       for(i = 0; i < 3; i ++)
 467   1       {
 468   2        s[i] = 0x00;
 469   2       }
 470   1       MultiPointReport(x, y, s, 3); //停止触摸
 471   1      }
 472          ////////////////////////End of function//////////////////////////////
 473          
 474          /********************************************************************
 475          函数功能：同时画正弦、余弦曲线。
 476          入口参数：无。
 477          返    回：无。
 478          备    注：无。
 479          ********************************************************************/
 480          void MultiPointDrawSinCosCurve()
 481          {
 482   1       uint16 x[2], y[2];
 483   1       uint8 s[2];
 484   1       uint16 i;
 485   1       x[0] = 400;
 486   1       y[0] = 2000;
 487   1       x[1] = 400;
 488   1       y[1] = 2000;
 489   1       s[0] = 0x06;
C51 COMPILER V7.06   MAIN                                                                  02/25/2012 23:05:51 PAGE 9   

 490   1       s[1] = 0x06;
 491   1       MultiPointReport(x, y, s, 2); //移动到起点
 492   1       s[0] = 0x07;
 493   1       s[1] = 0x07;
 494   1       MultiPointReport(x, y, s, 2); //开始画线
 495   1       for(i = 400; i <= 4000; i += 10)
 496   1       {
 497   2        x[0] = i;
 498   2        x[1] = i;
 499   2        y[0] = 2000 - 1000 * sin(((i - 400) / 2.5) / 180 * PI);
 500   2        y[1] = 2000 - 1000 * cos(((i - 400) / 2.5) / 180 * PI);
 501   2        MultiPointReport(x, y, s, 2); //画线
 502   2       }
 503   1       s[0] = 0x00;
 504   1       s[1] = 0x00;
 505   1       MultiPointReport(x, y, s, 2); //停止触摸
 506   1      }
 507          ////////////////////////End of function//////////////////////////////
 508          
 509          /********************************************************************
 510          函数功能：根据按键情况返回多点报告的函数。
 511          入口参数：无。
 512          返    回：无。
 513          备    注：无。
 514          ********************************************************************/
 515          void MultiPointSendReport(void)
 516          {
 517   1       if(KeyUp & (KEY1))
 518   1       {
 519   2        MultiPointGoToCenter(0); //松开
 520   2       }
 521   1       if(KeyPress & (KEY1)) //长按KEY1将弹出右键
 522   1       {
 523   2        MultiPointGoToCenter(1); //多点模式点击屏幕中央
 524   2       }
 525   1       if(KeyDown & (KEY2))
 526   1       {
 527   2        MultiPointDrawLine(); //多点模式画一条直线
 528   2       }
 529   1       if(KeyDown & (KEY3))
 530   1       {
 531   2        MultiPointDrawTriangle(); //同时画二个三角形
 532   2       }
 533   1       if(KeyDown & (KEY4))
 534   1       {
 535   2        MultiPointDrawSquare(); //同时画四个正方形
 536   2       }
 537   1       if(KeyDown & (KEY5))
 538   1       {
 539   2        MultiPointDrawCircle(); //同时画三个圆
 540   2       }
 541   1       if(KeyDown & (KEY6))
 542   1       {
 543   2        MultiPointDrawSinCosCurve(); //同时画正弦、余弦曲线
 544   2       }
 545   1       //记得清除KeyUp和KeyDown
 546   1       KeyUp=0;
 547   1       KeyDown=0;
 548   1      }
 549          ////////////////////////End of function//////////////////////////////
 550          
 551          /********************************************************************
C51 COMPILER V7.06   MAIN                                                                  02/25/2012 23:05:51 PAGE 10  

 552          函数功能：主函数。
 553          入口参数：无。
 554          返    回：无。
 555          备    注：无。
 556          ********************************************************************/
 557          void main(void)  //主函数
 558          {
 559   1      #ifdef SHOW_MORE_MSG //节省ROM空间
               uint8 i;
              #endif
 562   1      
 563   1       uint16 id;
 564   1       
 565   1       EA=1; //打开中断
 566   1       InitKeyboard(); //初始化按键
 567   1       InitUART();  //初始化串口
 568   1       
 569   1      #ifdef SHOW_MORE_MSG //节省ROM空间
               for(i=0;i<18;i++)   //显示信息
               {
                Prints(HeadTable[i]);
               }
              #endif
 575   1       
 576   1       id=D12ReadID();
 577   1      
 578   1       Prints("Your D12 chip\'s ID is: ");
 579   1       PrintShortIntHex(id);
 580   1      
 581   1      #ifdef SHOW_MORE_MSG //节省ROM空间
               if(id==0x1012)
               {
                Prints(". ID is correct! Congratulations!\r\n\r\n");
               }
               else
               {
                Prints(". ID is incorrect! What a pity!\r\n\r\n");
               }
              #endif
 591   1      
 592   1       UsbDisconnect();  //先断开USB连接
 593   1       UsbConnect();  //将USB连接上
 594   1       ConfigValue=0; //配置值初始化为0
 595   1       
 596   1       while(1)  //死循环
 597   1       {
 598   2        ProcessInterrupt(); //处理中断
 599   2        if(ConfigValue!=0) //如果已经设置为非0的配置，则可以返回报告数据
 600   2        {
 601   3         LEDs=~KeyPress;  //利用板上8个LED显示按键状态，按下时亮
 602   3         if(!Ep1InIsBusy)  //如果端点1输入没有处于忙状态，则可以发送数据
 603   3         {
 604   4          KeyCanChange=0;  //禁止按键扫描
 605   4          if(KeyUp || KeyDown || KeyPress) //如果有按键事件发生
 606   4          {
 607   5           if(TouchMode == MULTI_TOUCH_MODE) //多点触摸模式
 608   5           {
 609   6            MultiPointSendReport();  //则返回多点报告
 610   6           }
 611   5           else //鼠标或单点模式
 612   5           {
 613   6            SendReport();  //则返回单点报告
C51 COMPILER V7.06   MAIN                                                                  02/25/2012 23:05:51 PAGE 11  

 614   6           }
 615   5          }
 616   4          KeyCanChange=1;  //允许按键扫描
 617   4         }
 618   3        }
 619   2       }
 620   1      }
 621          ////////////////////////End of function//////////////////////////////


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3186    ----
   CONSTANT SIZE    =     30    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----     133
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
